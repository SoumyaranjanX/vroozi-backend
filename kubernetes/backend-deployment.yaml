apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: default
  labels:
    app: contract-processing-system
    component: backend
    environment: production
  annotations:
    kubernetes.io/change-cause: "Initial deployment"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
spec:
  # Initial replica count with ability to scale from 5-20 pods
  replicas: 5
  
  # Zero-downtime rolling update strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  # Pod selector matching labels
  selector:
    matchLabels:
      app: contract-processing-system
      component: backend
  
  template:
    metadata:
      labels:
        app: contract-processing-system
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
    
    spec:
      # Security context for enhanced pod security
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      
      # Service account for pod identity
      serviceAccountName: backend-service-account
      
      # Container specifications
      containers:
      - name: backend
        image: contract-processing-backend:latest
        imagePullPolicy: Always
        
        # Container security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        
        # Container ports
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        
        # Resource allocation
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        
        # Environment variables from ConfigMap and Secrets
        envFrom:
        - configMapRef:
            name: backend-configmap
        - secretRef:
            name: backend-secrets
        
        # Liveness probe for container health
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Readiness probe for service availability
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Volume mounts for temporary storage
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /cache
      
      # Volumes definition
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      
      # Pod scheduling and termination
      terminationGracePeriodSeconds: 60
      
      # Affinity rules for pod distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname
      
      # Node selection criteria
      nodeSelector:
        kubernetes.io/role: worker
      
      # Pod disruption budget reference
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
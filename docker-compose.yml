services:
  # FastAPI Application Service
  api:
    image: backend_api
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - /app/.venv  # Preserve virtual environment
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - API_V1_PREFIX=${API_V1_PREFIX}
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS}
      - MONGODB_URL=mongodb://mongodb:27017
      - MONGODB_DB_NAME=${MONGODB_DB_NAME}
      - USE_REDIS=false
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - AWS_REGION=${AWS_REGION}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - AWS_IMAGE_URI=${AWS_IMAGE_URI}
      - GOOGLE_VISION_CREDENTIALS=${GOOGLE_VISION_CREDENTIALS}
      - GOOGLE_VISION_API_TIMEOUT=${GOOGLE_VISION_API_TIMEOUT}
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB}
      - MAX_BATCH_SIZE_MB=${MAX_BATCH_SIZE_MB}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE}
      - LOG_LEVEL=${LOG_LEVEL}
      - PORT=8000
      - MAX_WORKERS=4
      - TIMEOUT=120
      - GRACEFUL_TIMEOUT=120
      - KEEP_ALIVE=5
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - backend_network
    restart: unless-stopped

  # Celery Worker Service
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
    volumes:
      - ./:/app
      - /app/.venv  # Preserve virtual environment
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - MONGODB_URL=mongodb://mongodb:27017
      - MONGODB_DB_NAME=${MONGODB_DB_NAME}
      - USE_REDIS=false
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - AWS_REGION=${AWS_REGION}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - GOOGLE_VISION_CREDENTIALS=${GOOGLE_VISION_CREDENTIALS}
      - GOOGLE_VISION_API_TIMEOUT=${GOOGLE_VISION_API_TIMEOUT}
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB}
      - MAX_BATCH_SIZE_MB=${MAX_BATCH_SIZE_MB}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      mongodb:
        condition: service_healthy
    command: /app/.venv/bin/celery -A app.tasks.celery_app worker --loglevel=info
    healthcheck:
      test: ["CMD", "/app/.venv/bin/celery", "-A", "app.tasks.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - backend_network
    restart: unless-stopped

  # MongoDB Service
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    environment:
      - MONGODB_DATABASE=${MONGODB_DB_NAME}
    command: ["mongod", "--bind_ip_all", "--replSet", "rs0"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    networks:
      - backend_network
    restart: unless-stopped

  # MongoDB Setup
  mongodb_setup:
    image: mongo:6.0
    depends_on:
      mongodb:
        condition: service_healthy
    command: >
      mongosh --host mongodb:27017 --eval '
      rs.initiate({
        _id: "rs0",
        members: [{ _id: 0, host: "mongodb:27017" }]
      })
      '
    networks:
      - backend_network

volumes:
  mongodb_data:
    name: cps_mongodb_data
    driver: local
  mongodb_config:
    name: cps_mongodb_config
    driver: local

networks:
  backend_network:
    name: cps_backend_network
    driver: bridge